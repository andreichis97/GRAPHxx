SETL t1: (getTickCount())

PROCEDURE global GET_MODEL_PREFIXES modelId: integer result: reference
{
    SETL prefixesValues:("")
    CC "Core" GET_CLASS_ID objid:(modelId)
    CC "Core" GET_CLASS_NAME classid:(classid)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"ModelPrefixes"
    SETL modelPrefixesId:(attrid)
    #attrid
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(modelId) attrid:(modelPrefixesId)
	FOR i in:(rowids)
	{
		CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
		SETL prefixValue:(val)
		CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Dictionary"
		SETL dictionaryValue:(val)
        SETL prefixesValues:(prefixesValues + "@prefix " + prefixValue + " " + dictionaryValue + ".\n")
	}
    SETL prefixesValues:(prefixesValues + "\n")
    SETL result:(prefixesValues)
}

PROCEDURE global GET_THINGTYPE_INFO connectorId: integer objectId: integer uriValue: string message: string result: reference   
{
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"URI"
    SETL objType:(val)
    CC "Core" GET_CLASS_ID objid:(connectorId)
    SETL connectorObjId:(connectorId)
    CC "Core" GET_CLASS_NAME classid:(classid)
    CC "Core" GET_ATTR_VAL objid:(connectorId) attrname:"URI"
    IF(classname = "IsOfType")
    {
        SETL relType:("a")
    }
    IF(classname = "To")
    {
        SETL relType:("rdfs:range")
    }
	IF(classname = "From")
    {
        SETL relType:("rdfs:domain")
    }
    IF (classname = "RelatedTo")
    {
        CC "Core" GET_ATTR_VAL objid:(connectorId) attrname:"URI"
        SETL relType:(val)
    }
    IF (classname = "IsAKindOf")
    {
       SETL relType:("rdfs:subClassOf")
    }
    SETL result:(message + uriValue + " " + relType + " " + objType + ".\n")
}

PROCEDURE global GET_PROPERTY_INFO connectorId: integer objectId: integer uriValue: string message: string result: reference   
{
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"URI"
    SETL objType:(val)
    CC "Core" GET_CLASS_ID objid:(connectorId)
    SETL connectorObjId:(connectorId)
    CC "Core" GET_CLASS_NAME classid:(classid)
    IF(classname = "IsOfType")
    {
        SETL relType:("a")
        SETL result:(message + uriValue + " " + relType + " " + objType + ".\n")
    }
    IF (classname = "From") 
    {
        SETL relType:("rdfs:domain")
        SETL result:(message + objType + " " + relType + " " + uriValue + ".\n")
    }
    IF (classname = "To") 
    {
        SETL relType:("rdfs:range")
        SETL result:(message + uriValue + " " + relType + " " + objType + ".\n")
    }
    IF (classname = "RelatedTo")
    {
        CC "Core" GET_ATTR_VAL objid:(connectorId) attrname:"URI"
        SETL relType:(val)
        SETL result:(message + uriValue + " " + relType + " " + objType + ".\n")
    }
    IF (classname = "IsAKindOf")
    {
        #CC "Core" GET_ATTR_VAL objid:(connectorId) attrname:"URI"
        SETL relType:("rdfs:subPropertyOf")
        #SETL result:(message + uriValue + " " + relType + " " + objType + ".\n")
    }
    SETL result:(message + uriValue + " " + relType + " " + objType + ".\n")
}

PROCEDURE global GET_DATATYPE_NODE_INFO connectorId: integer objectId: integer uriValue: string message: string result: reference   
{
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"Datatype"
    SETL dataType:(val)
    SETL connectorObjId:(connectorId)
    CC "Core" GET_CLASS_ID objid:(connectorId)
    SETL connectorObjId:(connectorId)
    CC "Core" GET_CLASS_NAME classid:(classid)
    IF(classname = "To")
    {
        SETL relType:("rdfs:range")
    }
    ELSE
    {
        CC "Core" GET_ATTR_VAL objid:(connectorId) attrname:"URI"
        SETL relType:(val)
    }
    SETL result:(message + uriValue + " " + relType + " " + dataType + ".\n")
}

#-------------------------------------------------------------------------------------------------------------------------------------------------#

CC "Modeling" GET_ACT_MODEL
SETL actModelId: (modelid)

CC "Core" GET_ATTR_VAL objid:(actModelId) attrname:"TriG Graph Prefix"
SETL modelPrefix:(val)

CC "Core" GET_ATTR_VAL objid:(actModelId) attrname:"TriG Graph Local identifier"
SETL modelLocalIdentifier:(val)

SETL prefixes:("")
SETL endMessage:("")
GET_MODEL_PREFIXES modelId:(actModelId) result:prefixes

IF(modelPrefix != "" AND modelLocalIdentifier != "")
{
    SETL message:(modelPrefix + modelLocalIdentifier + "\n" + "{" + "\n")
    SETL message:(prefixes + message)
    SETL endMessage:("\n" + "}")

}
ELSE
{
    SETL message:("")
    SETL message:(message + prefixes)
}

#SETL message:("")

#SETL message:(message + prefixes)

#thing types
CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"ThingType"
SETL thingTypesObjids:(objids)
FOR i in:(thingTypesObjids)
{
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriValue:(val)
    SETL message:(message + uriValue + " rdfs:subClassOf " + "schema:Thing." + "\n")
    
    #connectors
    CC "Core" GET_CONNECTORS objid:(VAL i) out
    SETL connectorsIds:(objids)
    FOR j in:(connectorsIds)
    {
        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL j)
        IF(j != i)
        {
            CC "Core" GET_CLASS_ID objid:(toobjid)
            CC "Core" GET_CLASS_NAME classid:(classid)
            SETL checkClassname:(classname)
            IF(checkClassname = "ThingType")
            {
                GET_THINGTYPE_INFO connectorId:(VAL j) objectId:(toobjid) uriValue:(uriValue) message:(message) result: message
            }
            IF(checkClassname = "Property")
            {
                GET_PROPERTY_INFO connectorId:(VAL j) objectId:(toobjid) uriValue:(uriValue) message:(message) result: message
            }
            IF(checkClassname = "DatatypeNode")
            {
                GET_DATATYPE_NODE_INFO connectorId:(VAL j) objectId:(toobjid) uriValue:(uriValue) message:(message) result: message
            }
        }
    }
}

#properties
CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Property"
SETL propertyObjids:(objids)
FOR i in:(propertyObjids)
{
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriValue:(val)
    SETL message:(message + uriValue + " rdfs:subPropertyOf " + "schema:Property." + "\n")
    
    #connectors
    CC "Core" GET_CONNECTORS objid:(VAL i) out
    SETL propertyConnectorsIds:(objids)
    FOR j in:(propertyConnectorsIds)
    {
        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL j)
        IF(j != i)
        {
            CC "Core" GET_CLASS_ID objid:(toobjid)
            CC "Core" GET_CLASS_NAME classid:(classid)
            SETL checkClassname:(classname)
            IF(checkClassname = "ThingType")
            {
				GET_THINGTYPE_INFO_FULL connectorId:(VAL j) objectId:(toobjid) uriValue:(uriValue) message:(message) result: message
            }
            IF(checkClassname = "Property")
            {
                GET_PROPERTY_INFO connectorId:(VAL j) objectId:(toobjid) uriValue:(uriValue) message:(message) result: message
            }
            IF(checkClassname = "DatatypeNode")
            {
                GET_DATATYPE_NODE_INFO connectorId:(VAL j) objectId:(toobjid) uriValue:(uriValue) message:(message) result: message
            }
        }
    }
}

IF(endMessage != "")
{
    SETL message:(message + endMessage)
    SETL filePath:("D:\\Andrei\\ModellingTools\\Graph_Modelling_Tool\\Scripts\\raw_schema_graph.trig")
    CC "AdoScript" FWRITE file:(filePath) text:(message) binary:0
    CC "AdoScript" SLEEP ms:500
    #Deletion of duplicate statements from the graph
    SETL deletionScriptFilePath:("D:\\Andrei\\ModellingTools\\Graph_Modelling_Tool\\Scripts\\trig_delete_duplicate_statements.py")
    START ("python " + deletionScriptFilePath)
    #CC "AdoScript" SLEEP ms:500
    SETL t2: (getTickCount())
    SETL timesec: ((t2-t1)*0.001)
    CC "AdoScript" INFOBOX ("The execution of the script took " + STR timesec+ " seconds.")
    SETL readFilePath:("D:\\Andrei\\ModellingTools\\Graph_Modelling_Tool\\Scripts\\schema_graph.trig")
    CC "AdoScript" FREAD file:(readFilePath)
    CC "AdoScript" VIEWBOX text:(text)
}
ELSE
{
    SETL filePath:("D:\\Andrei\\ModellingTools\\Graph_Modelling_Tool\\Scripts\\raw_schema_graph.ttl")
    CC "AdoScript" FWRITE file:(filePath) text:(message) binary:0
    CC "AdoScript" SLEEP ms:500
    #Deletion of duplicate statements from the graph
    SETL deletionScriptFilePath:("D:\\Andrei\\ModellingTools\\Graph_Modelling_Tool\\Scripts\\delete_duplicate_statements_schema.py")
    START ("python " + deletionScriptFilePath)
    CC "AdoScript" SLEEP ms:500
    SETL t2: (getTickCount())
    SETL timesec: ((t2-t1)*0.001)
    CC "AdoScript" INFOBOX ("The execution of the script took " + STR timesec+ " seconds.")
    SETL readFilePath:("D:\\Andrei\\ModellingTools\\Graph_Modelling_Tool\\Scripts\\schema_graph.ttl")
    CC "AdoScript" FREAD file:(readFilePath)
    CC "AdoScript" VIEWBOX text:(text)
}