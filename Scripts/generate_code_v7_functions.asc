SETL t1: (getTickCount())
PROCEDURE global GET_THINGTYPE_INFO objectId: integer dNameValue: string message: string result: reference   
{
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"DName"
    SETL objType:(val)
    SETL result:(message + dNameValue + " a " + objType + ".\n")
}

PROCEDURE global GET_THINGIDENTIFIER_INFO connectorId: integer objectId: integer dNameValue: string message: string result: reference   
{
    CC "Core" GET_CLASS_ID objid:(connectorId)
    CC "Core" GET_CLASS_NAME classid:(classid)
    IF(classname != "IsOfType")
    {
        CC "Core" GET_ATTR_VAL objid:(connectorId) attrname:"PName"
        SETL relType:(val)
        CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"DName"
        SETL objType:(val)
        SETL result:(message + dNameValue + " " + relType + " " + objType + ".\n")
    }
    ELSE 
    {
        CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"DName"
        SETL objType:(val)
        SETL result:(message + dNameValue + " " + "a" + " " + objType + ".\n")
    }
}

PROCEDURE global GET_DATA_INFO connectorId: integer objectId: integer dNameValue: string message: string result: reference   
{
    CC "Core" GET_ATTR_VAL objid:(connectorId) attrname:"PName"
    SETL relType:(val)
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"Value"
    SETL dataValue:(val)
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"Datatype"
    SETL dataType:(val)
    SETL result:(message + dNameValue + " " + relType + " " + "\"" + dataValue + "\"" + "^^" + dataType + ".\n")
}

PROCEDURE global GET_HELPER_NODE_INFO connectorId: integer objectId: integer dNameValue: string message: string result: reference   
{
    CC "Core" GET_ATTR_VAL objid:(connectorId) attrname:"PName"
    SETL relType:(val)
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"Uri"
    SETL uriValue:(val)
    CC "Core" GET_CLASS_ID objid:(objectId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"IsOfType"
    SETL attributesId:(attrid)
    CC "Core" GET_INTERREF objid:(objectId) attrid:(attributesId)
    CC "Core" GET_INTERREF_COUNT objid:(objectId) attrid:(attributesId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL thingTypeObjName:(tobjname)
        SETL thingTypeObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(thingTypeObjClassId) objname:(thingTypeObjName)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"DName"
        SETL helperNodeType:(val)
        SETL result:(message + dNameValue + " " + relType + " " + uriValue + ".\n" + uriValue + " a " + helperNodeType + ".\n")
    }
    ELSE
    {
        SETL result:(message + dNameValue + " " + relType + " " + uriValue + ".\n")
    }
}

PROCEDURE global GET_LIST_CONTAINER_INFO connectorId: integer objectId: integer dNameValue: string message: string result: reference   
{
    CC "Core" GET_ATTR_VAL objid:(connectorId) attrname:"PName"
    SETL relType:(val)
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"Name"
    SETL nameValue:(val)
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"ContainerType"
    SETL containerType:(val)
    CC "Core" GET_CLASS_ID objid:(objectId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"IsOfType"
    SETL attributesId:(attrid)
    CC "Core" GET_INTERREF objid:(objectId) attrid:(attributesId)
    CC "Core" GET_INTERREF_COUNT objid:(objectId) attrid:(attributesId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL thingTypeObjName:(tobjname)
        SETL thingTypeObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(thingTypeObjClassId) objname:(thingTypeObjName)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"DName"
        SETL listContainerType:(val)
        SETL message:(message + dNameValue + " " + relType + " " + nameValue + ".\n" + nameValue + " a " + listContainerType + ".\n")
    }
    ELSE
    {
        SETL message:(message + dNameValue + " " + relType + " " + nameValue + ".\n")
    }
    SETL objectsInListX:(array(100))
    SETL objectsInListY:(array(100))
    SETL objectsInListID:(array(100))
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"Position"
    SETL position:(val) #lower left corner. to get coordinates of oposed diagonal point, x = x1 + width, y = y1 + height #NODE x:2cm y:9cm w:6cm h:3cm index:15
    SETL rawX:(token(position, 1, " ")) #x:2cm
    SETL rawX:(replall(rawX, "x:", ""))
    SETL xPoz:(replall(rawX, "cm", ""))
    SETL xPoz:(VAL xPoz)
    SETL rawY:(token(position, 2, " "))
    SETL rawY:(replall(rawY, "y:", ""))
    SETL yPoz:(replall(rawY, "cm", ""))
    SETL yPoz:(VAL yPoz)
    SETL rawW:(token(position, 3, " "))
    SETL rawW:(replall(rawW, "w:", ""))
    SETL wVal:(replall(rawW, "cm", ""))
    SETL wVal:(VAL wVal)
    SETL rawH:(token(position, 4, " "))
    SETL rawH:(replall(rawH, "h:", ""))
    SETL hVal:(replall(rawH, "cm", ""))
    SETL hVal:(VAL hVal)
    #CC "AdoScript" VIEWBOX text:(hVal)

    SETL xPoz2:(xPoz + wVal)
    SETL yPoz2:(yPoz + hVal)
    #CC "AdoScript" VIEWBOX text:(STR xPoz2)

    CC "Modeling" GET_OBJECTS_WITHIN_AREA x1:(VAL (STR xPoz + "cm")) y1:(VAL (STR yPoz + "cm")) x2:(VAL (STR xPoz2 + "cm")) y2:(VAL (STR yPoz2 + "cm"))
    SETL elemsInList:(objids)
    SETL index:(0)
    FOR i in:(elemsInList)
    {
        CC "Core" GET_CLASS_ID objid:(VAL i)
        CC "Core" GET_CLASS_NAME classid:(classid)
        IF(classname != "ListContainer")
        {
            #CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
            #SETL uriVal:(val)
            #CC "AdoScript" VIEWBOX text:(uriVal)
            CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Position"
            SETL position:(val)
            SETL rawX:(token(position, 1, " ")) #x:2cm
            SETL rawX:(replall(rawX, "x:", ""))
            SETL xPoz:(replall(rawX, "cm", ""))
            SETL xPoz:(VAL xPoz)
            SETL rawY:(token(position, 2, " "))
            SETL rawY:(replall(rawY, "y:", ""))
            SETL yPoz:(replall(rawY, "cm", ""))
            SETL objectsInListX[index]:(xPoz)
            SETL objectsInListY[index]:(yPoz)
            SETL objectsInListID[index]:(VAL i)
            SETL index:(index + 1)
        }
    }
    IF(containerType = "Ordered")
    {
        FOR k from:(0) to:(index - 2)
        {
            SETL swapped:(0)
            FOR l from:(0) to:(index - k - 2)
            {
                IF ((objectsInListY[l]) > (objectsInListY[l+1]))
                {
                    SETL tempY:(objectsInListY[l])
                    SETL objectsInListY[l]:(objectsInListY[l+1])
                    SETL objectsInListY[l+1]:(tempY)
                    SETL tempX:(objectsInListX[l])
                    SETL objectsInListX[l]:(objectsInListX[l+1])
                    SETL objectsInListX[l+1]:(tempX)
                    SETL tempID:(objectsInListID[l])
                    SETL objectsInListID[l]:(objectsInListID[l+1])
                    SETL objectsInListID[l+1]:(tempID)
                    SETL swapped:(1)
                }
                IF ((objectsInListY[l]) = (objectsInListY[l+1]))
                {
                    IF((objectsInListX[l]) > (objectsInListX[l+1]))
                    {
                        SETL tempY:(objectsInListY[l])
                        SETL objectsInListY[l]:(objectsInListY[l+1])
                        SETL objectsInListY[l+1]:(tempY)
                        SETL tempX:(objectsInListX[l])
                        SETL objectsInListX[l]:(objectsInListX[l+1])
                        SETL objectsInListX[l+1]:(tempX)
                        SETL tempID:(objectsInListID[l])
                        SETL objectsInListID[l]:(objectsInListID[l+1])
                        SETL objectsInListID[l+1]:(tempID)
                        SETL swapped:(1)
                    }
                }
            }
            IF(swapped = 0)
            {
                BREAK
            }
        }
        SETL containerMessage:("")
        SETL containedIndexMessage:("")
        FOR i from:(0) to:(index - 1)
        {
            SETL containedObjectId:(objectsInListID[i])
            CC "Core" GET_ATTR_VAL objid:(containedObjectId) attrname:"DName"
            SETL containedDNameVal:(val)
            IF(i < index - 1)
            {
                SETL containerMessage:(containerMessage + containedDNameVal + ", ")
                SETL containedIndexMessage:(containedIndexMessage + containedDNameVal + " :index " + STR (i+1) + ".\n")
            }
            IF(i = index - 1)
            {
                SETL containerMessage:(containerMessage + containedDNameVal + ".")
                SETL containedIndexMessage:(containedIndexMessage + containedDNameVal + " :index " + STR (i+1) + ".\n")
            }
            #CC "AdoScript" VIEWBOX text:(uriVal)
        }
        SETL result:(message + nameValue + " rdfs:member " + containerMessage + "\n" + containedIndexMessage)
    }
    IF(containerType = "Unordered")
    {
        SETL containerMessage:("")
        FOR i from:(0) to:(index - 1)
        {
            SETL containedObjectId:(objectsInListID[i])
            CC "Core" GET_ATTR_VAL objid:(containedObjectId) attrname:"DName"
            SETL containedDNameVal:(val)
            IF(i < index - 1)
            {
                SETL containerMessage:(containerMessage + containedDNameVal + ", ")
            }
            IF(i = index - 1)
            {
                SETL containerMessage:(containerMessage + containedDNameVal + ".")
            }
            #CC "AdoScript" VIEWBOX text:(uriVal)
        }
        SETL result:(message + nameValue + " rdfs:member " + containerMessage + "\n")
    }
    #to add support for parsing elements from the list / anonymous node
}

PROCEDURE global GET_MODEL_PREFIXES modelId: integer result: reference
{
    SETL prefixesValues:("")
    CC "Core" GET_CLASS_ID objid:(modelId)
    CC "Core" GET_CLASS_NAME classid:(classid)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"ModelPrefixes"
    SETL modelPrefixesId:(attrid)
    #attrid
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(modelId) attrid:(modelPrefixesId)
	FOR i in:(rowids)
	{
		CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
		SETL prefixValue:(val)
		CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Dictionary"
		SETL dictionaryValue:(val)
        SETL prefixesValues:(prefixesValues + "@prefix " + prefixValue + " " + dictionaryValue + ".\n")
	}
    SETL prefixesValues:(prefixesValues + "\n")
    SETL result:(prefixesValues)
}

PROCEDURE global GET_THINGIDENTIFIER_ATTRIBUTES objId: integer dNameValue: string result: reference #trebuie dname din pas anterior
{
    SETL attributesValues:("")
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_CLASS_NAME classid:(classid)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Multi-Language Label"
    SETL attributesId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attributesId)
	FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Label"
		SETL labelValue:(val)
		CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Language"
		SETL languageValue:(val)
        SETL attributesValues:(attributesValues + dNameValue + " :hasLabel " + "\"" + labelValue + "\"" + "@" + languageValue + ".\n") #poate totusi sa schimbam numele lui :hasLabel
    }
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"IsOfType"
    SETL attributesId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(attributesId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(attributesId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL thingTypeObjName:(tobjname)
        SETL thingTypeObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(thingTypeObjClassId) objname:(thingTypeObjName)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"DName"
        SETL objTypeValue:(val)
        SETL attributesValues:(attributesValues + dNameValue + " a " + objTypeValue + ".\n")
    }
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Attributes"
    SETL attributesId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attributesId)
	SETL openAnonymousNode:(0)
    SETL openList:(0)
    FOR i in:(rowids)
	{
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
		SETL prefixValue:(val)
		CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"attributeURI"
		SETL attributeUriValue:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Value"
		SETL valueValue:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Datatype"
		SETL datatypeValue:(val)
        IF(openAnonymousNode = 0 AND openList = 0)
        {
            IF (datatypeValue != "URI")
            {
                IF(datatypeValue = "xsd:string" OR datatypeValue = "xsd:integer")
                {
                    SETL attributesValues:(attributesValues + dNameValue + " " + prefixValue + attributeUriValue + " " + "\"" + valueValue + "\"" + "^^" + datatypeValue + ".\n")
                }
                IF(datatypeValue = "[")
                {
                    SETL attributesValues:(attributesValues + dNameValue + " " + prefixValue + attributeUriValue + " " + "[")
                    SETL openAnonymousNode:(1)
                }
            }
            ELSE
            {
                SETL attributesValues:(attributesValues + dNameValue + " " + prefixValue + attributeUriValue + " " + valueValue + ".\n")
            }
        }
        IF(openAnonymousNode = 1 AND openList = 0)
        {
            IF (datatypeValue != "URI")
            {
                IF(datatypeValue = "xsd:string" OR datatypeValue = "xsd:integer")
                {
                    SETL attributesValues:(attributesValues + prefixValue + attributeUriValue + " " + "\"" + valueValue + "\"" + "^^" + datatypeValue + "; ")
                }
                IF(datatypeValue = "]")
                {
                    SETL attributesValues:(attributesValues + "]" + ".\n")
                    SETL openAnonymousNode:(0)
                }
            }
            ELSE
            {
                SETL attributesValues:(attributesValues + prefixValue + attributeUriValue + " " + valueValue + "; ")
            }
        }
        IF(openList = 0 AND openAnonymousNode = 0)
        {
            IF (datatypeValue != "URI")
            {
                IF(datatypeValue = "xsd:string" OR datatypeValue = "xsd:integer")
                {
                    SETL attributesValues:(attributesValues + dNameValue + " " + prefixValue + attributeUriValue + " " + "\"" + valueValue + "\"" + "^^" + datatypeValue + ".\n")
                }
                IF(datatypeValue = "(")
                {
                    SETL attributesValues:(attributesValues + dNameValue + " " + prefixValue + attributeUriValue + " " + "(")
                    SETL openList:(1)
                }
            }
            ELSE
            {
                SETL attributesValues:(attributesValues + dNameValue + " " + prefixValue + attributeUriValue + " " + valueValue + ".\n")
            }
        }
        IF(openList = 1 AND openAnonymousNode = 0)
        {
            IF (datatypeValue != "URI")
            {
                IF(datatypeValue = "xsd:string" OR datatypeValue = "xsd:integer")
                {
                    SETL attributesValues:(attributesValues + "\"" + valueValue + "\"" + "^^" + datatypeValue + " ")
                }
                IF(datatypeValue = ")")
                {
                    SETL attributesValues:(attributesValues + ")" + ".\n")
                    SETL openList:(0)
                }
            }
            ELSE
            {
                SETL attributesValues:(attributesValues + valueValue + " ")
            }
        }
	}
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"SameAs"
    SETL attributesId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(attributesId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(attributesId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL sameAsObjName:(tobjname)
        SETL sameAsObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(sameAsObjClassId) objname:(sameAsObjName)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"DName"
        SETL sameAsObjectValue:(val)
        SETL attributesValues:(attributesValues + dNameValue + " owl:sameAs " + sameAsObjectValue + ".\n")
    }
    SETL result:(attributesValues)
}

#-------------------------------------------------------------------------------------------------------------------------------------------------#

CC "Modeling" GET_ACT_MODEL
SETL actModelId: (modelid)

SETL prefixes:("")

GET_MODEL_PREFIXES modelId:(actModelId) result:prefixes

SETL message:("")

SETL message:(message + prefixes)

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"ThingIdentifier"
SETL thingIdentifiersObjids:(objids)
FOR i in:(thingIdentifiersObjids)
{
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"DName"
    SETL dNameValue:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Label"
    SETL label:(val)
    SETL message:(message + dNameValue + " :hasLabel " + "\"" + label + "\"" + ".\n")
    GET_THINGIDENTIFIER_ATTRIBUTES objId:(VAL i) dNameValue:(dNameValue) result:objAttrs
    SETL message:(message + objAttrs)
    SETL objAttrs:("")
    
    #connectors
    CC "Core" GET_CONNECTORS objid:(VAL i) out
    SETL connectorsIds:(objids)
    FOR j in:(connectorsIds)
    {
        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL j)
        IF(j != i)
        {
            CC "Core" GET_CLASS_ID objid:(toobjid)
            CC "Core" GET_CLASS_NAME classid:(classid)
            IF(classname = "ThingType")
            {
                GET_THINGTYPE_INFO objectId:(toobjid) dNameValue:(dNameValue) message:(message) result: message
            }
            IF(classname = "ThingIdentifier")
            {
                GET_THINGIDENTIFIER_INFO connectorId:(VAL j) objectId:(toobjid) dNameValue:(dNameValue) message:(message) result: message
            }
            IF(classname = "Data")
            {
                GET_DATA_INFO connectorId:(VAL j) objectId:(toobjid) dNameValue:(dNameValue) message:(message) result: message
            }
            IF(classname = "HelperNode")
            {
                GET_HELPER_NODE_INFO connectorId:(VAL j) objectId:(toobjid) dNameValue:(dNameValue) message:(message) result: message
            }
            IF(classname = "ListContainer")
            {
                GET_LIST_CONTAINER_INFO connectorId:(VAL j) objectId:(toobjid) dNameValue:(dNameValue) message:(message) result: message
            }
        }
    }
}

#Helper Nodes relationships parsing
CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"HelperNode"
SETL helperNodesObjids:(objids)
FOR i in:(helperNodesObjids)
{
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Uri"
    SETL uriValue:(val)
    
    #connectors
    CC "Core" GET_CONNECTORS objid:(VAL i) out
    SETL connectorsIds:(objids)
    FOR j in:(connectorsIds)
    {
        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL j)
        IF(j != i)
        {
            CC "Core" GET_CLASS_ID objid:(toobjid)
            CC "Core" GET_CLASS_NAME classid:(classid)
            IF(classname = "ThingType")
            {
                GET_THINGTYPE_INFO objectId:(toobjid) dNameValue:(uriValue) message:(message) result: message
            }
            IF(classname = "ThingIdentifier")
            {
                GET_THINGIDENTIFIER_INFO connectorId:(VAL j) objectId:(toobjid) dNameValue:(uriValue) message:(message) result: message
            }
            IF(classname = "Data")
            {
                GET_DATA_INFO connectorId:(VAL j) objectId:(toobjid) dNameValue:(uriValue) message:(message) result: message
            }
            IF(classname = "HelperNode")
            {
                GET_HELPER_NODE_INFO connectorId:(VAL j) objectId:(toobjid) dNameValue:(uriValue) message:(message) result: message
            }
            IF(classname = "ListContainer")
            {
                GET_LIST_CONTAINER_INFO connectorId:(VAL j) objectId:(toobjid) dNameValue:(uriValue) message:(message) result: message
            }
        }
    }
}
#CC "AdoScript" VIEWBOX text:(message)

#Write file 
#SETL filePath:(".Graph_Modelling_Tool\\Scripts\\content_graph.ttl")
SETL filePath:("D:\\Andrei\\ModellingTools\\Graph_Modelling_Tool\\Scripts\\raw_content_graph.ttl")
CC "AdoScript" FWRITE file:(filePath) text:(message) binary:0
CC "AdoScript" SLEEP ms:500
#Deletion of duplicate statements from the graph
SETL deletionScriptFilePath:("D:\\Andrei\\ModellingTools\\Graph_Modelling_Tool\\Scripts\\delete_duplicate_statements.py")
START ("python " + deletionScriptFilePath)
#CC "AdoScript" SLEEP ms:500
SETL t2: (getTickCount())
SETL timesec: ((t2-t1)*0.001)
CC "AdoScript" INFOBOX ("The execution of the script took " + STR timesec+ " seconds.")
SETL readFilePath:("D:\\Andrei\\ModellingTools\\Graph_Modelling_Tool\\Scripts\\content_graph.ttl")
CC "AdoScript" FREAD file:(readFilePath)
CC "AdoScript" VIEWBOX text:(text)