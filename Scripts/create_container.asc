CC "Modeling" GET_ACT_MODEL
SETL actModelId: (modelid)

SETL predicatesIdList:(array(100))
SETL predicatesPrefixList:(array(100))
SETL predicatesLocalIdentifiersList:(array(100))

#For container get the biggest distances between points on both axes

CC "Modeling" GET_SELECTED  modelid:(actModelId)
SETL counter:(0)
SETL objectsInListX:(array(100))
SETL objectsInListY:(array(100))
SETL objectsInListID:(array(100))
SETL index:(0)
FOR i in:(objids)
{
    CC "Core" GET_CONNECTORS objid:(VAL i) in
    SETL connectorIds:(objids)
    FOR j in:(connectorIds)
    {
        CC "Core" GET_CLASS_ID objid:(VAL j)
        CC "Core" GET_CLASS_NAME classid:(classid)
        IF (classname = "RelatedTo")
        {
            SETL predicatesIdList[counter]:(VAL j)
            CC "Core" GET_ATTR_VAL objid:(VAL j) attrname:"Prefix"
            SETL prefix:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL j) attrname:"Local identifier"
            SETL localIdentifier:(val)
            SETL predicatesPrefixList[counter]:(prefix)
            SETL predicatesLocalIdentifiersList[counter]:(localIdentifier)
            SETL counter:(counter + 1)
        }
    }

    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Position"
    SETL position:(val)
    SETL rawX:(token(position, 1, " ")) #x:2cm
    SETL rawX:(replall(rawX, "x:", ""))
    SETL xPoz:(replall(rawX, "cm", ""))
    SETL xPoz:(VAL xPoz)
    SETL rawY:(token(position, 2, " "))
    SETL rawY:(replall(rawY, "y:", ""))
    SETL yPoz:(replall(rawY, "cm", ""))
    SETL yPoz:(VAL yPoz)
    SETL objectsInListX[index]:(xPoz)
    SETL objectsInListY[index]:(yPoz)
    SETL objectsInListID[index]:(VAL i)
    SETL index:(index + 1)
}

FOR i from:(0) to:(index-2)
{
    FOR l from:(i+1) to:(index-1)
    {
        IF ((objectsInListY[l]) > (objectsInListY[i]))
        {
            SETL tempY:(objectsInListY[l])
            SETL objectsInListY[l]:(objectsInListY[i])
            SETL objectsInListY[i]:(tempY)
            SETL tempX:(objectsInListX[l])
            SETL objectsInListX[l]:(objectsInListX[i])
            SETL objectsInListX[i]:(tempX)
            SETL tempID:(objectsInListID[l])
            SETL objectsInListID[l]:(objectsInListID[i])
            SETL objectsInListID[i]:(tempID)
        }
        IF ((objectsInListY[l]) = (objectsInListY[i]))
        {
            IF((objectsInListX[l]) < (objectsInListX[i]))
            {
                SETL tempY:(objectsInListY[l])
                SETL objectsInListY[l]:(objectsInListY[i])
                SETL objectsInListY[i]:(tempY)
                SETL tempX:(objectsInListX[l])
                SETL objectsInListX[l]:(objectsInListX[i])
                SETL objectsInListX[i]:(tempX)
                SETL tempID:(objectsInListID[l])
                SETL objectsInListID[l]:(objectsInListID[i])
                SETL objectsInListID[i]:(tempID)
            }
        }
    }
}

#FOR i from:(0) to:(index-1)
#{
#    CC "AdoScript" VIEWBOX text:(STR objectsInListY[i])
#}

SETL lowestY:(objectsInListY[index-1])
SETL lowestX:(objectsInListX[index-1])
SETL highestY:(objectsInListY[0])
SETL highestX:(objectsInListX[0])

SETL width:(highestX - lowestX)
SETL height:(highestY - lowestY)

IF (width < 0)
{
    SETL width:(width * -1)
}
SETL width:(width + 2)

IF (height < 0)
{
    SETL height:(height * -1)
}
SETL height:(height + 2)

#SETL exp:("Lowest X: " + STR lowestX + " Lowest Y: " + STR lowestY + " Highest X: " + STR highestX + " Highest Y: " + STR highestY + " Width: " + STR width + " Height: " + STR height)

#CC "AdoScript" VIEWBOX text:(exp)

SETL connectorsMessage:("The incoming predicates of the selected nodes are: \n")
FOR j from:(0) to:(counter-1)
{
    SETL toShow:(predicatesPrefixList[j] + predicatesLocalIdentifiersList[j])
    SETL connectorsMessage:(connectorsMessage + toShow + "\n")
}

CC "AdoScript" VIEWBOX text:(connectorsMessage)

CC "AdoScript" EDITBOX text:(adoscript) title:"Input the prefix and the local identifier of the predicate that will be removed, with a space between them" oktext:"Send" 
SETL toRemove:(text) 
SETL prefixToRemove:(token(toRemove, 0, " "))
SETL localIdentifierToRemove:(token(toRemove, 1, " "))

FOR j from:(0) to:(counter-1)
{
    IF (localIdentifierToRemove = predicatesLocalIdentifiersList[j] AND prefixToRemove = predicatesPrefixList[j])
    {
        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(predicatesIdList[j])
        CC "Core" DELETE_CONNECTOR modelid:(actModelId) objid:(predicatesIdList[j])
    }
}

CC "Core" GET_CLASS_ID classname:"ListContainer"
CC "AdoScript" EDITBOX text:(adoscript) title:"Input the prefix and the local identifier of the container that will be added, with a space between them" oktext:"Send"
SETL toAddContainer:(text) 
SETL containerPrefix:(token(toAddContainer, 0, " "))
SETL containerLocalIdentifier:(token(toAddContainer, 1, " ")) 
CC "Core" CREATE_OBJ modelid:(actModelId) classid:(classid) objname:""
CC "Core" SET_ATTR_VAL objid:(objid) attrname:("Prefix") val:(containerPrefix)
CC "Core" SET_ATTR_VAL objid:(objid) attrname:("Local identifier") val:(containerLocalIdentifier)
CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Position"
SETL position:(val)
SETL rawIndex:(token(position, 5, " "))
SETL rawIndex:(replall(rawX, "index:", ""))
SETL index:(VAL rawIndex)
SETL highestX:(highestX - 1)
SETL highestY:(highestY - height + 1)
SETL expContainer:("NODE x:" + STR highestX + "cm y:" + STR highestY + "cm w:" + STR width + "cm h:" + STR height + "cm index:" + STR index)
CC "Core" SET_ATTR_VAL objid:(objid) attrname:("Position") val:(expContainer)


CC "AdoScript" EDITBOX text:(adoscript) title:"Input the prefix and the local identifier of the predicate that will be linked to the container, with a space between them" oktext:"Send"
SETL toAdd:(text) 
SETL prefixToAdd:(token(toAdd, 0, " "))
SETL localIdentifierToAdd:(token(toAdd, 1, " ")) 

CC "Core" GET_CLASS_ID relation classname:"RelatedToList"
SETL listContainerConnectorClassId:(classid)
CC "Core" CREATE_CONNECTOR modelid:(actModelId) fromobjid:(fromobjid) toobjid:(objid) classid:(listContainerConnectorClassId)
CC "Core" SET_ATTR_VAL objid:(objid) attrname:("Prefix") val:(prefixToAdd)
CC "Core" SET_ATTR_VAL objid:(objid) attrname:("Local identifier") val:(localIdentifierToAdd)
        